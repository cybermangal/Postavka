# reminders.py ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è aiogram v3 —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Mongo –∏ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–º —á–µ—Ä–µ–∑ /cron/due
import calendar
from datetime import datetime, timedelta, timezone
from typing import Iterable, Optional, List, Dict

from aiogram import types, F
from aiogram.filters import Command

from config import ADMIN_IDS, ALLOWED_USERS, TIMEZONE as TZ_NAME
from db import reminders as col

# --- —Ç–∞–π–º–∑–æ–Ω–∞ ---
try:
    from zoneinfo import ZoneInfo
    TZ = ZoneInfo(TZ_NAME)
except Exception:
    TZ = timezone.utc

# --- —É—Ç–∏–ª–∏—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def _ints_set(items: Iterable) -> set[int]:
    try:
        return {int(x) for x in items}
    except Exception:
        return set()

ENV_ADMINS = _ints_set(ADMIN_IDS)
ENV_ALLOWED = _ints_set(ALLOWED_USERS)

def is_admin(user_id: int) -> bool:
    return int(user_id) in ENV_ADMINS

def now_tz() -> datetime:
    return datetime.now(TZ)

def make_aware(dt: datetime) -> datetime:
    if dt.tzinfo is None:
        return dt.replace(tzinfo=TZ)
    return dt.astimezone(TZ)

def parse_time_hhmm(s: str) -> Optional[tuple[int,int]]:
    try:
        hh, mm = s.split(":")
        return int(hh), int(mm)
    except Exception:
        return None

# --- –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
RU_DOW = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
EN_DOW = {"mon":0,"tue":1,"wed":2,"thu":3,"fri":4,"sat":5,"sun":6}
DOW_TO_RU = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"]

def parse_dow_list(token: str) -> Optional[List[int]]:
    if not token:
        return None
    token = token.strip().lower().replace(" ", "")
    res = set()
    for part in token.split(","):
        if part in RU_DOW: res.add(RU_DOW[part])
        elif part in EN_DOW: res.add(EN_DOW[part])
        else: return None
    return sorted(res) if res else None

def human_dow_list(dows: List[int]) -> str:
    return ",".join(DOW_TO_RU[d] for d in dows)

def describe_repeat(rep: Optional[Dict]) -> str:
    if not rep: return "one-time"
    if rep.get("freq") == "daily": return "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
    if rep.get("freq") == "weekly": return f"–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ({human_dow_list(rep.get('dows', []))})"
    if rep.get("freq") == "monthly": return f"–µ–∂–µ–º–µ—Å—è—á–Ω–æ (–¥–µ–Ω—å {rep.get('dom')})"
    return "–ø–æ–≤—Ç–æ—Ä?"

# --- –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã ---
def next_daily(dt: datetime) -> datetime: return dt + timedelta(days=1)

def next_weekly(dt: datetime, dows: List[int]) -> datetime:
    for i in range(1, 8):
        cand = dt + timedelta(days=i)
        if cand.weekday() in dows:
            return cand.replace(hour=dt.hour, minute=dt.minute, second=0, microsecond=0)
    return dt + timedelta(days=7)

def next_monthly(dt: datetime, dom: int) -> datetime:
    y, m = dt.year, dt.month
    if m == 12:
        y, m = y + 1, 1
    else:
        m += 1
    last = calendar.monthrange(y, m)[1]
    d = min(dom, last)
    return dt.replace(year=y, month=m, day=d)

# ---- –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º Mongo allowlist –∏–∑ bot.allowed_dynamic) ----
def _recipients(bot_instance=None) -> List[int]:
    dyn = set()
    if bot_instance is not None:
        dyn = set(getattr(bot_instance, "allowed_dynamic", set()))
    return sorted(ENV_ADMINS | ENV_ALLOWED | dyn)

# ---- –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–æ–Ω –¥–ª—è –∫—Ä–æ–Ω–∞ ----
async def process_due_reminders(bot) -> int:
    now = now_tz()
    due = [x async for x in col.find({"when": {"$lte": now}})]
    total = 0
    users = _recipients(bot)
    for it in due:
        try:
            text = it.get("text", "")
            for uid in users:
                try:
                    await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}")
                except Exception:
                    pass

            rep = it.get("repeat")
            if rep:
                when = it["when"]
                if isinstance(when, str):
                    when = datetime.fromisoformat(when)
                when = make_aware(when)
                if rep["freq"] == "daily":
                    nxt = next_daily(when)
                elif rep["freq"] == "weekly":
                    nxt = next_weekly(when, rep.get("dows", []))
                elif rep["freq"] == "monthly":
                    nxt = next_monthly(when, int(rep.get("dom")))
                else:
                    nxt = None

                if nxt:
                    await col.update_one({"_id": it["_id"]}, {"$set": {"when": nxt}})
                else:
                    await col.delete_one({"_id": it["_id"]})
            else:
                await col.delete_one({"_id": it["_id"]})
            total += 1
        except Exception:
            # –Ω–µ —Ä–æ–Ω—è–µ–º –ø—Ä–æ–≥–æ–Ω —Ü–µ–ª–∏–∫–æ–º
            pass
    return total

# --- –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ---
def _is_reminders_button(text: str) -> bool:
    if not text:
        return False
    t = text.replace("üîî", "").strip().lower()
    return t in {"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"}

# --- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def register_reminders_handlers(dp, is_authorized, refuse, *, bot_instance=None):

    @dp.message(Command("tz"))
    async def tz_cmd(message: types.Message):
        await message.reply(
            f"–¢–µ–∫—É—â–∞—è —Ç–∞–π–º–∑–æ–Ω–∞: `{TZ_NAME}`\n–°–µ–π—á–∞—Å: *{now_tz().strftime('%Y-%m-%d %H:%M')}*",
            parse_mode="Markdown"
        )

    def recipients() -> List[int]:
        # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è help –∏ —Ç.–¥.
        return _recipients(bot_instance)

    @dp.message(F.text.func(_is_reminders_button))
    async def reminders_button(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        await remind_help(message)

    @dp.message(Command("remind_help", "remind"))
    async def remind_help(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
        text = (
            "*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Å–ø—Ä–∞–≤–∫–∞*\n\n"
            "–†–∞–∑–æ–≤—ã–µ:\n"
            "‚Ä¢ `/remindall YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç`\n\n"
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n"
            "‚Ä¢ `/remindall_daily HH:MM –¢–µ–∫—Å—Ç`\n"
            "‚Ä¢ `/remindall_weekly –î–ù–ò HH:MM –¢–µ–∫—Å—Ç` (–¥–Ω–∏: `–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å` –∏–ª–∏ `mon,tue,...`)\n"
            "‚Ä¢ `/remindall_monthly DD HH:MM –¢–µ–∫—Å—Ç` (–¥–µ–Ω—å 1‚Äì31)\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "‚Ä¢ `/reminders` ‚Äî —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ `/delreminder ID` ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        )
        await message.reply(text, parse_mode="Markdown")

    # --- —Ä–∞–∑–æ–≤–∞—è ---
    @dp.message(Command("remindall"))
    async def remindall_once(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        date_str, time_str, text = parts[1], parts[2], parts[3]
        try:
            y, m, d = map(int, date_str.split("-"))
            hh, mm = map(int, time_str.split(":"))
            run_at = make_aware(datetime(y, m, d, hh, mm))
        except Exception:
            await message.reply("–î–∞—Ç–∞/–≤—Ä–µ–º—è: `YYYY-MM-DD HH:MM`.", parse_mode="Markdown"); return
        if run_at <= now_tz():
            await message.reply("–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è."); return

        base = f"ONE-{y:04d}{m:02d}{d:02d}{hh:02d}{mm:02d}"
        num = await col.count_documents({"id": {"$regex": f"^{base}"}})
        rem_id = f"{base}-{num}"

        await col.insert_one({"id": rem_id, "when": run_at, "text": text})
        await message.reply(
            f"‚úÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞ *{y:04d}-{m:02d}-{d:02d} {hh:02d}:{mm:02d}*\nID: `{rem_id}`\n–¢–µ–∫—Å—Ç:\n```\n{text}\n```",
            parse_mode="Markdown"
        )

    # --- –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ---
    @dp.message(Command("remindall_daily"))
    async def remindall_daily(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
        args = (message.text or "").split(maxsplit=2)
        if len(args) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_daily HH:MM –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        hm = parse_time_hhmm(args[1])
        if not hm:
            await message.reply("–í—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        start = make_aware(datetime(now.year, now.month, now.day, hh, mm))
        if start <= now:
            start += timedelta(days=1)

        base = f"DLY-{hh:02d}{mm:02d}"
        num = await col.count_documents({"id": {"$regex": f"^{base}"}})
        rem_id = f"{base}-{num}"

        await col.insert_one({"id": rem_id, "when": start, "text": args[2], "repeat": {"freq": "daily"}})
        await message.reply(
            f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ *{hh:02d}:{mm:02d}*\n–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{start.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # --- –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ---
    @dp.message(Command("remindall_weekly"))
    async def remindall_weekly(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_weekly –ø–Ω,—Å—Ä 10:00 –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        dows = parse_dow_list(parts[1])
        hm = parse_time_hhmm(parts[2])
        if not dows or not hm:
            await message.reply("–î–Ω–∏: `–ø–Ω,–≤—Ç,...` –∏–ª–∏ `mon,tue,...`; –≤—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        candidate = make_aware(datetime(now.year, now.month, now.day, hh, mm))
        if candidate <= now or candidate.weekday() not in dows:
            for i in range(1, 8):
                cand = candidate + timedelta(days=i)
                if cand.weekday() in dows:
                    candidate = cand; break

        base = f"WKY-{human_dow_list(dows)}-{hh:02d}{mm:02d}"
        num = await col.count_documents({"id": {"$regex": f"^{base}"}})
        rem_id = f"{base}-{num}"

        await col.insert_one({
            "id": rem_id,
            "when": candidate,
            "text": parts[3],
            "repeat": {"freq": "weekly", "dows": dows}
        })
        await message.reply(
            f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ *{human_dow_list(dows)}* –≤ *{hh:02d}:{mm:02d}*\n"
            f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{candidate.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # --- –µ–∂–µ–º–µ—Å—è—á–Ω–æ ---
    @dp.message(Command("remindall_monthly"))
    async def remindall_monthly(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_monthly DD 09:00 –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        try:
            dd = int(parts[1])
            if not (1 <= dd <= 31): raise ValueError
        except Exception:
            await message.reply("–î–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1‚Äì31.", parse_mode="Markdown"); return
        hm = parse_time_hhmm(parts[2])
        if not hm:
            await message.reply("–í—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        y, m = now.year, now.month
        last = calendar.monthrange(y, m)[1]
        d = min(dd, last)
        cand = make_aware(datetime(y, m, d, hh, mm))
        if cand <= now:
            if m == 12: y, m = y + 1, 1
            else: m += 1
            last = calendar.monthrange(y, m)[1]
            d = min(dd, last)
            cand = make_aware(datetime(y, m, d, hh, mm))

        base = f"MTH-{dd:02d}-{hh:02d}{mm:02d}"
        num = await col.count_documents({"id": {"$regex": f"^{base}"}})
        rem_id = f"{base}-{num}"

        await col.insert_one({
            "id": rem_id,
            "when": cand,
            "text": parts[3],
            "repeat": {"freq": "monthly", "dom": dd}
        })
        await message.reply(
            f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ *–¥–µ–Ω—å {dd}* –≤ *{hh:02d}:{mm:02d}*\n"
            f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{cand.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # --- —Å–ø–∏—Å–æ–∫ ---
    @dp.message(Command("reminders"))
    async def remind_list(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        items = [x async for x in col.find().sort("when", 1)]
        if not items:
            await message.reply("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç."); return

        lines = []
        for it in items:
            when = it["when"]
            if isinstance(when, str):
                when = datetime.fromisoformat(when)
            when = make_aware(when)
            when_str = when.strftime("%Y-%m-%d %H:%M")
            rep = it.get("repeat")
            lines.append(f"- `{it.get('id')}` ‚Äî *{when_str}* ‚Äî {describe_repeat(rep)} ‚Äî {it.get('text','')}")
        await message.reply("*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n" + "\n".join(lines), parse_mode="Markdown")

    # --- —É–¥–∞–ª–µ–Ω–∏–µ ---
    @dp.message(Command("delreminder"))
    async def remind_delete(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
        parts = (message.text or "").split(maxsplit=1)
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/delreminder ID`", parse_mode="Markdown"); return
        rem_id = parts[1].strip()
        res = await col.delete_one({"id": rem_id})
        if res.deleted_count == 0:
            await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `{rem_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        else:
            await message.reply(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `{rem_id}` —É–¥–∞–ª–µ–Ω–æ.", parse_mode="Markdown")
