# reminders.py ‚Äî –º–æ–¥—É–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ä–∞–∑–æ–≤—ã–µ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ) –¥–ª—è aiogram v3 –≤ —Å—Ç–∏–ª–µ calc.py
import asyncio
import json
import calendar
from pathlib import Path
from datetime import datetime, timedelta
from typing import Iterable, Optional, List, Dict

from aiogram import types, F
from aiogram.filters import Command

# --- –∫–æ–Ω—Ñ–∏–≥ ---
from config import ADMIN_IDS, ALLOWED_USERS
try:
    from config import TIMEZONE  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Samara"
except Exception:
    TIMEZONE = "UTC"

# --- —Ç–∞–π–º–∑–æ–Ω–∞ ---
try:
    from zoneinfo import ZoneInfo
    TZ = ZoneInfo(TIMEZONE)
except Exception:
    TZ = None  # –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞

# --- —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ---
KNOWN_USERS_FILE = Path("known_users.json")
REMINDERS_FILE   = Path("reminders.json")

# --- —É—Ç–∏–ª–∏—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def _ints_set(items: Iterable) -> set[int]:
    try:
        return {int(x) for x in items}
    except Exception:
        return set()

def is_admin(user_id: int) -> bool:
    return int(user_id) in _ints_set(ADMIN_IDS)

def is_authorized_local(user_id: int) -> bool:
    uid = int(user_id)
    return uid in _ints_set(ADMIN_IDS) or uid in _ints_set(ALLOWED_USERS)

# --- –ø—Ä–æ—á–∏–µ —É—Ç–∏–ª–∏—Ç—ã ---
def remember_user(uid: int) -> None:
    try:
        data = json.loads(KNOWN_USERS_FILE.read_text(encoding="utf-8")) if KNOWN_USERS_FILE.exists() else []
        s = set(int(x) for x in data)
        s.add(int(uid))
        KNOWN_USERS_FILE.write_text(json.dumps(sorted(s), ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        pass

def load_known_users() -> set[int]:
    try:
        if KNOWN_USERS_FILE.exists():
            data = json.loads(KNOWN_USERS_FILE.read_text(encoding="utf-8"))
            return set(int(x) for x in data)
    except Exception:
        pass
    return set()

def get_broadcast_recipients() -> List[int]:
    base = _ints_set(ADMIN_IDS) | _ints_set(ALLOWED_USERS) | load_known_users()
    return sorted([uid for uid in base if is_authorized_local(uid)])

def now_tz() -> datetime:
    return datetime.now(tz=TZ) if TZ else datetime.now()

def make_aware(dt: datetime) -> datetime:
    return dt.replace(tzinfo=TZ) if (TZ and dt.tzinfo is None) else dt

def parse_time_hhmm(s: str) -> Optional[tuple[int,int]]:
    try:
        hh, mm = s.split(":")
        return int(hh), int(mm)
    except Exception:
        return None

# --- –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
RU_DOW = {"–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6}
EN_DOW = {"mon":0,"tue":1,"wed":2,"thu":3,"fri":4,"sat":5,"sun":6}
DOW_TO_RU = ["–ü–ù","–í–¢","–°–†","–ß–¢","–ü–¢","–°–ë","–í–°"]

def parse_dow_list(token: str) -> Optional[List[int]]:
    if not token:
        return None
    token = token.strip().lower().replace(" ", "")
    res = set()
    for part in token.split(","):
        if part in RU_DOW: res.add(RU_DOW[part])
        elif part in EN_DOW: res.add(EN_DOW[part])
        else: return None
    return sorted(res) if res else None

def human_dow_list(dows: List[int]) -> str:
    return ",".join(DOW_TO_RU[d] for d in dows)

# --- —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á ---
def load_reminders() -> List[Dict]:
    if REMINDERS_FILE.exists():
        try:
            return json.loads(REMINDERS_FILE.read_text(encoding="utf-8"))
        except Exception:
            pass
    return []

def save_reminders(items: List[Dict]) -> None:
    REMINDERS_FILE.write_text(json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º ---
async def broadcast(bot, text: str):
    for uid in get_broadcast_recipients():
        try:
            await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}")
        except Exception:
            pass

# --- —Ä–∞—Å—á—ë—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ ---
def next_daily(dt: datetime) -> datetime: return dt + timedelta(days=1)

def next_weekly(dt: datetime, dows: List[int]) -> datetime:
    for i in range(1, 8):
        cand = dt + timedelta(days=i)
        if cand.weekday() in dows:
            return cand.replace(hour=dt.hour, minute=dt.minute, second=dt.second, microsecond=0)
    return dt + timedelta(days=7)

def next_monthly(dt: datetime, dom: int) -> datetime:
    y, m = dt.year, dt.month
    if m == 12:
        y, m = y + 1, 1
    else:
        m += 1
    last = calendar.monthrange(y, m)[1]
    d = min(dom, last)
    return dt.replace(year=y, month=m, day=d)

def describe_repeat(rep: Optional[Dict]) -> str:
    if not rep: return "one-time"
    if rep.get("freq") == "daily": return "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
    if rep.get("freq") == "weekly": return f"–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ({human_dow_list(rep.get('dows', []))})"
    if rep.get("freq") == "monthly": return f"–µ–∂–µ–º–µ—Å—è—á–Ω–æ (–¥–µ–Ω—å {rep.get('dom')})"
    return "–ø–æ–≤—Ç–æ—Ä?"

# --- —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä ---
_worker_started = False

async def _reminder_worker(bot, interval_sec: int = 15):
    while True:
        try:
            now = now_tz()
            items = load_reminders()
            keep: List[Dict] = []
            for it in items:
                try:
                    when = datetime.fromisoformat(it["when"])
                    if TZ and when.tzinfo is None:
                        when = when.replace(tzinfo=TZ)
                    if when <= now:
                        await broadcast(bot, it.get("text", ""))
                        rep = it.get("repeat")
                        if rep:
                            if rep["freq"] == "daily":
                                nxt = next_daily(when)
                            elif rep["freq"] == "weekly":
                                nxt = next_weekly(when, rep.get("dows", []))
                            elif rep["freq"] == "monthly":
                                nxt = next_monthly(when, int(rep.get("dom")))
                            else:
                                nxt = None
                            if nxt:
                                it["when"] = nxt.isoformat()
                                keep.append(it)
                        # one-time ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    else:
                        keep.append(it)
                except Exception:
                    pass
            save_reminders(keep)
        except Exception:
            pass
        await asyncio.sleep(interval_sec)

# --- –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ---
def _is_reminders_button(text: str) -> bool:
    if not text:
        return False
    t = text.replace("üîî", "").strip().lower()
    return t in {"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"}

# --- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∫–∞–∫ calc.py) ---
def register_reminders_handlers(dp, is_authorized, refuse, *, bot_instance=None):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    –í—ã–∑–æ–≤ –∏–∑ Postavka.py:
        from reminders import register_reminders_handlers
        register_reminders_handlers(dp, is_authorized, refuse, bot_instance=bot)
    """

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª (—Å/–±–µ–∑ —ç–º–æ–¥–∑–∏) ‚Üí –º–∏–Ω–∏-—Å–ø—Ä–∞–≤–∫–∞
    @dp.message(F.text.func(_is_reminders_button))
    async def reminders_button(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.answer("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        await remind_help(message)

    # –ú–∏–Ω–∏-—Å–ø—Ä–∞–≤–∫–∞
    @dp.message(Command("remind_help", "remind"))
    async def remind_help(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        tz_note = f"{TIMEZONE}" if TZ else "server time"
        text = (
            "*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —Å–ø—Ä–∞–≤–∫–∞*\n\n"
            "–†–∞–∑–æ–≤—ã–µ:\n"
            "‚Ä¢ `/remindall YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç`\n\n"
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n"
            "‚Ä¢ `/remindall_daily HH:MM –¢–µ–∫—Å—Ç`\n"
            "‚Ä¢ `/remindall_weekly –î–ù–ò HH:MM –¢–µ–∫—Å—Ç` (–¥–Ω–∏: `–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å` –∏–ª–∏ `mon,tue,...`)\n"
            "‚Ä¢ `/remindall_monthly DD HH:MM –¢–µ–∫—Å—Ç` (–¥–µ–Ω—å 1‚Äì31)\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
            "‚Ä¢ `/reminders` ‚Äî —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ `/delreminder ID` ‚Äî —É–¥–∞–ª–∏—Ç—å\n\n"
            f"_–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –≤ TZ: *{tz_note}*._"
        )
        await message.reply(text, parse_mode="Markdown")

    # –†–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    @dp.message(Command("remindall"))
    async def remindall_once(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        _, date_str, time_str, text = parts[0], parts[1], parts[2], parts[3]

        try:
            y, m, d = map(int, date_str.split("-"))
            hh, mm = map(int, time_str.split(":"))
            run_at = make_aware(datetime(y, m, d, hh, mm))
        except Exception:
            await message.reply("–î–∞—Ç–∞/–≤—Ä–µ–º—è: `YYYY-MM-DD HH:MM`.", parse_mode="Markdown"); return

        if run_at <= now_tz():
            await message.reply("–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è."); return

        items = load_reminders()
        base = f"ONE-{y:04d}{m:02d}{d:02d}{hh:02d}{mm:02d}"
        num = len([1 for it in items if str(it.get("id","")).startswith(base)])
        rem_id = f"{base}-{num}"

        items.append({"id": rem_id, "when": run_at.isoformat(), "text": text})
        save_reminders(items)

        await message.reply(
            f"‚úÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞ *{y:04d}-{m:02d}-{d:02d} {hh:02d}:{mm:02d}* ({TIMEZONE})\nID: `{rem_id}`\n–¢–µ–∫—Å—Ç:\n```\n{text}\n```",
            parse_mode="Markdown"
        )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
    @dp.message(Command("remindall_daily"))
    async def remindall_daily(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        args = (message.text or "").split(maxsplit=2)
        if len(args) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_daily HH:MM –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        time_str, text = args[1], args[2]
        hm = parse_time_hhmm(time_str)
        if not hm:
            await message.reply("–í—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        start = make_aware(datetime(now.year, now.month, now.day, hh, mm))
        if start <= now:
            start += timedelta(days=1)

        items = load_reminders()
        base = f"DLY-{hh:02d}{mm:02d}"
        num = len([1 for it in items if str(it.get("id","")).startswith(base)])
        rem_id = f"{base}-{num}"

        items.append({"id": rem_id, "when": start.isoformat(), "text": text, "repeat": {"freq": "daily"}})
        save_reminders(items)

        await message.reply(
            f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ *{hh:02d}:{mm:02d}* ({TIMEZONE})\n–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{start.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
    @dp.message(Command("remindall_weekly"))
    async def remindall_weekly(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_weekly –ø–Ω,—Å—Ä 10:00 –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        dows_token, time_str, text = parts[1], parts[2], parts[3]

        dows = parse_dow_list(dows_token)
        hm = parse_time_hhmm(time_str)
        if not dows or not hm:
            await message.reply("–î–Ω–∏: `–ø–Ω,–≤—Ç,...` –∏–ª–∏ `mon,tue,...`; –≤—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        candidate = make_aware(datetime(now.year, now.month, now.day, hh, mm))
        if candidate <= now or candidate.weekday() not in dows:
            for i in range(1, 8):
                cand = candidate + timedelta(days=i)
                if cand.weekday() in dows:
                    candidate = cand; break

        items = load_reminders()
        base = f"WKY-{human_dow_list(dows)}-{hh:02d}{mm:02d}"
        num = len([1 for it in items if str(it.get("id","")).startswith(base)])
        rem_id = f"{base}-{num}"

        items.append({"id": rem_id, "when": candidate.isoformat(), "text": text, "repeat": {"freq": "weekly", "dows": dows}})
        save_reminders(items)

        await message.reply(
            f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ *{human_dow_list(dows)}* –≤ *{hh:02d}:{mm:02d}* ({TIMEZONE})\n"
            f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{candidate.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # –ï–∂–µ–º–µ—Å—è—á–Ω–æ
    @dp.message(Command("remindall_monthly"))
    async def remindall_monthly(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        parts = (message.text or "").split(maxsplit=3)
        if len(parts) < 4:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remindall_monthly DD 09:00 –¢–µ–∫—Å—Ç`", parse_mode="Markdown"); return
        dd_str, time_str, text = parts[1], parts[2], parts[3]

        try:
            dd = int(dd_str)
            if not (1 <= dd <= 31): raise ValueError
        except Exception:
            await message.reply("–î–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1‚Äì31.", parse_mode="Markdown"); return

        hm = parse_time_hhmm(time_str)
        if not hm:
            await message.reply("–í—Ä–µ–º—è: `HH:MM`.", parse_mode="Markdown"); return
        hh, mm = hm

        now = now_tz()
        y, m = now.year, now.month
        last = calendar.monthrange(y, m)[1]
        d = min(dd, last)
        cand = make_aware(datetime(y, m, d, hh, mm))
        if cand <= now:
            if m == 12: y, m = y+1, 1
            else: m += 1
            last = calendar.monthrange(y, m)[1]
            d = min(dd, last)
            cand = make_aware(datetime(y, m, d, hh, mm))

        items = load_reminders()
        base = f"MTH-{dd:02d}-{hh:02d}{mm:02d}"
        num = len([1 for it in items if str(it.get("id","")).startswith(base)])
        rem_id = f"{base}-{num}"

        items.append({"id": rem_id, "when": cand.isoformat(), "text": text, "repeat": {"freq": "monthly", "dom": dd}})
        save_reminders(items)

        await message.reply(
            f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ *–¥–µ–Ω—å {dd}* –≤ *{hh:02d}:{mm:02d}* ({TIMEZONE})\n"
            f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: *{cand.strftime('%Y-%m-%d %H:%M')}*\nID: `{rem_id}`",
            parse_mode="Markdown"
        )

    # –°–ø–∏—Å–æ–∫
    @dp.message(Command("reminders"))
    async def remind_list(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        items = load_reminders()
        if not items:
            await message.reply("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç."); return

        def sort_key(it: Dict):
            try:
                dt = datetime.fromisoformat(it["when"])
                if TZ and dt.tzinfo is None:
                    dt = dt.replace(tzinfo=TZ)
                return dt
            except Exception:
                return datetime.max

        items.sort(key=sort_key)
        lines = []
        for it in items:
            rep = it.get("repeat")
            when = datetime.fromisoformat(it["when"])
            if TZ and when.tzinfo is None:
                when = when.replace(tzinfo=TZ)
            when_str = when.astimezone(TZ).strftime("%Y-%m-%d %H:%M") if TZ else when.strftime("%Y-%m-%d %H:%M")
            lines.append(f"- `{it['id']}` ‚Äî *{when_str}* ‚Äî {describe_repeat(rep)} ‚Äî {it.get('text','')}")
        await message.reply("*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n" + "\n".join(lines), parse_mode="Markdown")

    # –£–¥–∞–ª–µ–Ω–∏–µ
    @dp.message(Command("delreminder"))
    async def remind_delete(message: types.Message):
        if not is_admin(message.from_user.id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return

        parts = (message.text or "").split(maxsplit=1)
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/delreminder ID`", parse_mode="Markdown"); return
        rem_id = parts[1].strip()

        items = load_reminders()
        new_items = [it for it in items if it.get("id") != rem_id]
        if len(new_items) == len(items):
            await message.reply(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `{rem_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown"); return
        save_reminders(new_items)
        await message.reply(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `{rem_id}` —É–¥–∞–ª–µ–Ω–æ.", parse_mode="Markdown")

    # --- –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ dp ---
    async def _on_startup():
        global _worker_started
        if not _worker_started:
            _worker_started = True
            bot = bot_instance or dp.bot
            asyncio.create_task(_reminder_worker(bot, interval_sec=15))

    dp.startup.register(_on_startup)
