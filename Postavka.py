# Postavka.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (aiogram v3, webhook/polling)
import asyncio
import logging
from typing import Iterable, Set

import aiogram
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.filters import StateFilter

# === CONFIG ===
# –í config.py –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
# TOKEN, ADMIN_IDS (list|set), ALLOWED_USERS (list|set), TIMEZONE (—Å—Ç—Ä–æ–∫–∞)
from config import TOKEN, ADMIN_IDS, ALLOWED_USERS
try:
    from config import TIMEZONE   # –Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow"
except Exception:
    TIMEZONE = "UTC"

# === –†–∞–∑–¥–µ–ª—ã (–º–æ–¥—É–ª–∏) ===
from notes import register_notes_handlers
from calc import register_calc_handlers
from docs import register_docs_handlers

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–º–æ–¥—É–ª—å) ===
from reminders import register_reminders_handlers

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logging.info("Aiogram version: %s", aiogram.__version__)

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
def _ints_set(items: Iterable) -> Set[int]:
    try:
        return {int(x) for x in items}
    except Exception:
        return set()

def is_admin(user_id: int) -> bool:
    return int(user_id) in _ints_set(ADMIN_IDS)

def is_authorized(user_id: int) -> bool:
    uid = int(user_id)
    return uid in _ints_set(ADMIN_IDS) or uid in _ints_set(ALLOWED_USERS)

async def refuse(message: types.Message):
    await message.answer(
        "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!\n\n"
        f"–í–∞—à Telegram ID: `{message.from_user.id}`\n"
        "–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
        parse_mode="Markdown",
    )

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")],
        [KeyboardButton(text="üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª‚Ä¶",
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")],
        [KeyboardButton(text="üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],   # –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ reminders.py
    ],
    resize_keyboard=True,
    input_field_placeholder="–ê–¥–º–∏–Ω-–º–µ–Ω—é‚Ä¶",
)

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üëá –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö —á–µ—Ä–µ–∑ message.bot.*
setattr(bot, "main_kb", main_kb)
setattr(bot, "admin_kb", admin_kb)

# === –ö–æ–º–∞–Ω–¥—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è ===
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    if not is_authorized(message.from_user.id):
        await refuse(message); return
    tz_note = f"{TIMEZONE}" if TIMEZONE else "server time"
    text = (
        "*–°–ø—Ä–∞–≤–∫–∞*\n\n"
        "‚Ä¢ `/start` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/whoami` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "‚Ä¢ `/users` ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "‚Ä¢ `/cancel` ‚Äî –æ—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n"
        "*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω):*\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞: ¬´üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª ‚Äî –º–∏–Ω–∏-—Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ `/remind_help` ‚Äî –º–∏–Ω–∏-—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º\n"
        "‚Ä¢ `/remindall YYYY-MM-DD HH:MM –¢–µ–∫—Å—Ç` ‚Äî —Ä–∞–∑–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "‚Ä¢ `/remindall_daily HH:MM –¢–µ–∫—Å—Ç` ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
        "‚Ä¢ `/remindall_weekly –î–ù–ò HH:MM –¢–µ–∫—Å—Ç` ‚Äî –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ø–Ω,—Å—Ä,–ø—Ç` –∏–ª–∏ `mon,fri`)\n"
        "‚Ä¢ `/remindall_monthly DD HH:MM –¢–µ–∫—Å—Ç` ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ (–¥–µ–Ω—å 1‚Äì31)\n"
        "‚Ä¢ `/reminders` ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ `/delreminder ID` ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        f"_–í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–∞–π–º–∑–æ–Ω–µ: *{tz_note}*._"
    )
    await message.reply(text, parse_mode="Markdown")

@dp.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    await message.reply(f"–í–∞—à Telegram ID: `{message.from_user.id}`", parse_mode="Markdown")

@dp.message(Command("users"))
async def cmd_users(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."); return
    admins = ", ".join(map(str, sorted(_ints_set(ADMIN_IDS)))) or "‚Äî"
    users  = ", ".join(map(str, sorted(_ints_set(ALLOWED_USERS)))) or "‚Äî"
    await message.reply(
        "*–ê–¥–º–∏–Ω—ã:*\n"
        f"`{admins}`\n\n"
        "*–î–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"`{users}`",
        parse_mode="Markdown"
    )

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    if not is_authorized(message.from_user.id):
        await refuse(message); return
    await state.clear()  # –≤–∞–∂–Ω—ã–π —Å–±—Ä–æ—Å –ª—é–±—ã—Ö –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    kb = admin_kb if is_admin(message.from_user.id) else main_kb
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)

@dp.message(Command("cancel"))
async def cancel_any(message: types.Message, state: FSMContext):
    if not is_authorized(message.from_user.id):
        await refuse(message); return
    await state.clear()
    kb = admin_kb if is_admin(message.from_user.id) else main_kb
    await message.reply("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb)

# === –°—Ç—Ä–∞—Ö—É—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è) ===
menu_router = Router(name="menu")

@menu_router.message(StateFilter('*'), F.text.in_({"üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã"}))
async def menu_entry(message: types.Message, state: FSMContext):
    if not is_authorized(message.from_user.id):
        await refuse(message); return
    mapping = {
        "üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": "–†–∞–∑–¥–µ–ª ¬´–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä¬ª. –ß—Ç–æ —Å—á–∏—Ç–∞–µ–º?",
        "üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏": "–†–∞–∑–¥–µ–ª ¬´–ó–∞–º–µ—Ç–∫–∏¬ª. –ì–æ—Ç–æ–≤ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å.",
        "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã":   "–†–∞–∑–¥–µ–ª ¬´–î–æ–∫—É–º–µ–Ω—Ç—ã¬ª. –ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å?",
    }
    kb = admin_kb if is_admin(message.from_user.id) else main_kb
    await message.answer(mapping.get(message.text, "–û–∫"), reply_markup=kb)

# === Fallback: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≤–µ—Ü. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö, –æ—Ç–≤–µ—á–∞–µ—Ç –æ—Ç–∫–∞–∑–æ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º ===
fallback_router = Router(name="fallback")

@fallback_router.message()
async def all_other(message: types.Message):
    if not is_authorized(message.from_user.id):
        await refuse(message)
    # –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö ‚Äî –º–æ–ª—á–∏–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π/—Ä–æ—É—Ç–µ—Ä–æ–≤ ===
def setup_handlers() -> None:
    # 1) –°—Ç—Ä–∞—Ö—É—é—â–µ–µ –º–µ–Ω—é ‚Äî –¥–æ –º–æ–¥—É–ª–µ–π
    dp.include_router(menu_router)

    # 2) –†–∞–∑–¥–µ–ª—ã
    register_notes_handlers(dp, is_authorized, refuse)
    register_calc_handlers(dp, is_authorized, refuse)
    register_docs_handlers(dp, is_authorized, refuse)

    # 3) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ ¬´üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è¬ª –∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã)
    #    bot_instance –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ startup.
    register_reminders_handlers(dp, is_authorized, refuse, bot_instance=bot)

    # 4) –û–±—â–∏–π –ª–æ–≤–µ—Ü ‚Äî —Å—Ç—Ä–æ–≥–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    dp.include_router(fallback_router)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (polling).
# –ù–∞ Render (free) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ webhook.py
async def main():
    setup_handlers()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
