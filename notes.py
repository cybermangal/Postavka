from aiogram import types, F
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import asyncio

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–º–µ—Ç–æ–∫ ---
user_notes = {}

# --- –¢–µ–∫—Å—Ç—ã –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
button_texts = [
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
    "‚è∞ –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
    "üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏",
    "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
    "‚¨ÖÔ∏è –í –º–µ–Ω—é"
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ---
notes_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")],
        [KeyboardButton(text="‚è∞ –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º")],
        [KeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class NotesFSM(StatesGroup):
    waiting_for_note_text = State()
    waiting_for_reminder_text = State()
    waiting_for_reminder_date = State()
    waiting_for_reminder_time = State()
    waiting_for_reminder_custom_date = State()
    waiting_for_reminder_custom_time = State()
    waiting_for_delete_number = State()

def register_notes_handlers(dp, is_authorized, refuse):

    @dp.message(F.text == "üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
    async def notes_menu(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏?", reply_markup=notes_kb)

    @dp.message(F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
    async def to_main_menu(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=message.bot.main_kb)

    @dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    async def add_note_start(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ /cancel):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(NotesFSM.waiting_for_note_text)

    @dp.message(NotesFSM.waiting_for_note_text)
    async def save_note(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return

        # –ù–µ –¥–∞—ë–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∏
        if message.text in button_texts:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ /cancel.\n"
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /cancel.",
                reply_markup=ReplyKeyboardRemove(),
            )
            return

        if message.text.lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=notes_kb)
            return

        user_id = message.from_user.id
        note = message.text
        user_notes.setdefault(user_id, []).append(note)
        await state.clear()
        await message.answer("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=notes_kb)

    @dp.message(F.text == "‚è∞ –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º")
    async def reminder_note_start(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ /cancel):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(NotesFSM.waiting_for_reminder_text)

    @dp.message(NotesFSM.waiting_for_reminder_text)
    async def reminder_note_text(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return

        # –ù–µ –¥–∞—ë–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        if message.text in button_texts:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ /cancel.\n"
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /cancel.",
                reply_markup=ReplyKeyboardRemove(),
            )
            return

        if message.text.lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=notes_kb)
            return
        await state.update_data(reminder_text=message.text)
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="reminder_date_today")],
            [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="reminder_date_tomorrow")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", callback_data="reminder_date_other")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb)
        await state.set_state(NotesFSM.waiting_for_reminder_date)

    @dp.callback_query(F.data.startswith("reminder_date_"))
    async def reminder_choose_date(callback: types.CallbackQuery, state: FSMContext):
        if not is_authorized(callback.from_user.id):
            await refuse(callback.message)
            return
        data = callback.data
        now = datetime.now()
        if data == "reminder_date_today":
            await state.update_data(reminder_date=now.date())
        elif data == "reminder_date_tomorrow":
            await state.update_data(reminder_date=(now + timedelta(days=1)).date())
        elif data == "reminder_date_other":
            await callback.message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ /cancel:")
            await state.set_state(NotesFSM.waiting_for_reminder_custom_date)
            await callback.answer()
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="09:00", callback_data="reminder_time_09:00"),
             InlineKeyboardButton(text="12:00", callback_data="reminder_time_12:00")],
            [InlineKeyboardButton(text="15:00", callback_data="reminder_time_15:00"),
             InlineKeyboardButton(text="18:00", callback_data="reminder_time_18:00")],
            [InlineKeyboardButton(text="21:00", callback_data="reminder_time_21:00")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="reminder_time_other")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=kb)
        await state.set_state(NotesFSM.waiting_for_reminder_time)
        await callback.answer()

    @dp.message(NotesFSM.waiting_for_reminder_custom_date)
    async def reminder_custom_date(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        if message.text.lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=notes_kb)
            return
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            await state.update_data(reminder_date=date)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="09:00", callback_data="reminder_time_09:00"),
                 InlineKeyboardButton(text="12:00", callback_data="reminder_time_12:00")],
                [InlineKeyboardButton(text="15:00", callback_data="reminder_time_15:00"),
                 InlineKeyboardButton(text="18:00", callback_data="reminder_time_18:00")],
                [InlineKeyboardButton(text="21:00", callback_data="reminder_time_21:00")],
                [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="reminder_time_other")]
            ])
            await message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:", reply_markup=kb)
            await state.set_state(NotesFSM.waiting_for_reminder_time)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 15.08.2025 –∏–ª–∏ /cancel")

    @dp.callback_query(F.data.startswith("reminder_time_"))
    async def reminder_choose_time(callback: types.CallbackQuery, state: FSMContext):
        if not is_authorized(callback.from_user.id):
            await refuse(callback.message)
            return
        data = callback.data
        if data == "reminder_time_other":
            await callback.message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:30) –∏–ª–∏ /cancel:")
            await state.set_state(NotesFSM.waiting_for_reminder_custom_time)
            await callback.answer()
            return
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è
        time_str = data.replace("reminder_time_", "")
        await state.update_data(reminder_time=time_str)
        await create_reminder(callback.message, state)
        await callback.answer()

    @dp.message(NotesFSM.waiting_for_reminder_custom_time)
    async def reminder_custom_time(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return

        if message.text in button_texts:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ /cancel.\n"
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏ /cancel.",
                reply_markup=ReplyKeyboardRemove(),
            )
            return

        if message.text.lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=notes_kb)
            return
        try:
            t = datetime.strptime(message.text, "%H:%M").time()
            await state.update_data(reminder_time=message.text)
            await create_reminder(message, state)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ 09:30 –∏–ª–∏ /cancel")

    async def create_reminder(message_or_callback, state: FSMContext):
        data = await state.get_data()
        reminder_text = data.get("reminder_text")
        reminder_date = data.get("reminder_date")
        reminder_time = data.get("reminder_time")
        user_id = message_or_callback.from_user.id
        try:
            dt_str = f"{reminder_date} {reminder_time}"
            dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
            now = datetime.now()
            delay = (dt - now).total_seconds()
            if delay <= 0:
                await message_or_callback.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=notes_kb)
                await state.clear()
                return
            user_notes.setdefault(user_id, []).append(f"‚è∞ {reminder_text} [{dt.strftime('%d.%m.%Y %H:%M')}]")
            await message_or_callback.answer(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é: {dt.strftime('%d.%m.%Y %H:%M')}", reply_markup=notes_kb
            )
            asyncio.create_task(send_reminder_later(message_or_callback.bot, user_id, reminder_text, dt))
        except Exception:
            await message_or_callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.", reply_markup=notes_kb)
        await state.clear()

    async def send_reminder_later(bot, user_id, text, dt):
        now = datetime.now()
        delay = (dt - now).total_seconds()
        await asyncio.sleep(delay)
        try:
            await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n{text}")
        except Exception:
            pass

    @dp.message(F.text == "üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏")
    async def show_notes(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        user_id = message.from_user.id
        notes = user_notes.get(user_id, [])
        if not notes:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=notes_kb)
        else:
            txt = "\n\n".join([f"{i+1}. {n}" for i, n in enumerate(notes)])
            await message.answer(f"–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n{txt}", reply_markup=notes_kb)

    @dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    async def delete_note_start(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        user_id = message.from_user.id
        notes = user_notes.get(user_id, [])
        if not notes:
            await message.answer("–£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ, –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.", reply_markup=notes_kb)
            return
        txt = "\n".join([f"{i+1}. {n[:30]}" for i, n in enumerate(notes)])
        await message.answer(f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{txt}\n\n–ò–ª–∏ /cancel", reply_markup=notes_kb)
        await state.set_state(NotesFSM.waiting_for_delete_number)

    @dp.message(NotesFSM.waiting_for_delete_number)
    async def confirm_delete(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        user_id = message.from_user.id
        notes = user_notes.get(user_id, [])
        if message.text.lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=notes_kb)
            return
        try:
            num = int(message.text) - 1
            if 0 <= num < len(notes):
                deleted = user_notes[user_id].pop(num)
                await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n{deleted}", reply_markup=notes_kb)
            else:
                await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏.", reply_markup=notes_kb)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=notes_kb)
        await state.clear()
