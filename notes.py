# notes.py ‚Äî –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å MongoDB
from datetime import datetime, timezone
from typing import List

from aiogram import types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

from db import notes as col

notes_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")],
        [KeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

async def _add_note(user_id: int, text: str) -> str:
    doc = {"user_id": int(user_id), "text": text, "created_at": datetime.now(timezone.utc)}
    res = await col.insert_one(doc)
    return str(res.inserted_id)

async def _list_notes(user_id: int, limit: int = 20) -> List[dict]:
    cur = col.find({"user_id": int(user_id)}).sort("created_at", -1).limit(limit)
    return [doc async for doc in cur]

async def _delete_note(user_id: int, idx: int) -> bool:
    # —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –≤ —Ç–µ–∫—É—â–µ–π –≤—ã–¥–∞—á–µ
    items = await _list_notes(user_id, limit=50)
    if 1 <= idx <= len(items):
        target = items[idx - 1]
        res = await col.delete_one({"_id": target["_id"], "user_id": int(user_id)})
        return res.deleted_count == 1
    return False

def register_notes_handlers(dp, is_authorized, refuse):

    @dp.message(F.text == "üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
    async def notes_menu(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message); return
        await message.answer(
            "–ó–∞–º–µ—Ç–∫–∏.\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.\n"
            "‚Ä¢ ¬´üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫¬ª ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –∫–æ–º–∞–Ω–¥–∞ `/delnote N`).",
            reply_markup=notes_kb
        )

    @dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    async def ask_note(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message); return
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

    # –ª–æ–≤–∏–º –ª—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
    @dp.message(F.text & ~F.text.in_({"üóí –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫", "‚¨ÖÔ∏è –í –º–µ–Ω—é"}))
    async def save_note(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message); return
        # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º; –∏–Ω–∞—á–µ –Ω–µ –º–µ—à–∞–µ–º –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∞–º
        # –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å FSM
        text = message.text.strip()
        if not text:
            return
        note_id = await _add_note(message.from_user.id, text)
        await message.reply(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (id: `{note_id}`)", parse_mode="Markdown", reply_markup=notes_kb)

    @dp.message(F.text == "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
    async def list_notes(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message); return
        items = await _list_notes(message.from_user.id, limit=20)
        if not items:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=notes_kb); return

        lines = []
        for i, it in enumerate(items, start=1):
            dt = it["created_at"]
            try:
                dt_str = dt.astimezone().strftime("%Y-%m-%d %H:%M")
            except Exception:
                dt_str = str(dt)
            # –ø–µ—Ä–≤—ã–µ ~80 —Å–∏–º–≤–æ–ª–æ–≤
            preview = (it.get("text") or "")[:80]
            lines.append(f"{i}. [{dt_str}] {preview}")
        lines.append("\n–£–¥–∞–ª–∏—Ç—å: `/delnote N` (–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)")
        await message.answer("\n".join(lines), parse_mode="Markdown", reply_markup=notes_kb)

    @dp.message(Command("delnote"))
    async def del_note_cmd(message: types.Message):
        if not is_authorized(message.from_user.id):
            await refuse(message); return
        parts = (message.text or "").split(maxsplit=1)
        if len(parts) < 2 or not parts[1].isdigit():
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/delnote N` ‚Äî –Ω–æ–º–µ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞.", parse_mode="Markdown"); return
        ok = await _delete_note(message.from_user.id, int(parts[1]))
        await message.reply("üóë –£–¥–∞–ª–µ–Ω–æ." if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä.", reply_markup=notes_kb)
