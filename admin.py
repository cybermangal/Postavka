# admin.py
import json
import asyncio
from pathlib import Path
from typing import Iterable

from aiogram import types, Router
from aiogram.filters import Command

from config import ADMIN_IDS, ALLOWED_USERS  # ALLOWED_USERS ‚Äî —Å–ø–∏—Å–æ–∫/–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑ config

ALLOWED_USERS_FILE = Path("allowed_users.json")
_lock = asyncio.Lock()
router = Router()


def _ensure_ints(items: Iterable) -> list[int]:
    out = []
    for x in items:
        try:
            out.append(int(x))
        except Exception:
            pass
    return out


def load_allowed_users() -> None:
    """–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏–∑ config.ALLOWED_USERS."""
    if ALLOWED_USERS_FILE.exists():
        try:
            data = json.loads(ALLOWED_USERS_FILE.read_text(encoding="utf-8"))
            data = _ensure_ints(data)
        except Exception:
            data = []
        # –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –º—É—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
        if isinstance(ALLOWED_USERS, set):
            ALLOWED_USERS.clear()
            ALLOWED_USERS.update(data)
        else:
            ALLOWED_USERS.clear()
            ALLOWED_USERS.extend(data)
    else:
        save_allowed_users()  # –∑–∞—Å–µ–≤–∞–µ–º —Ñ–∞–π–ª–∏–∫ —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –∏–∑ config


def save_allowed_users() -> None:
    current = sorted(_ensure_ints(ALLOWED_USERS))
    ALLOWED_USERS_FILE.write_text(json.dumps(current, ensure_ascii=False, indent=2), encoding="utf-8")


def _is_admin(uid: int) -> bool:
    return int(uid) in _ensure_ints(ADMIN_IDS)


def _extract_target_id(msg: types.Message) -> int | None:
    """
    –ë–µ—Ä—ë–º ID:
    1) –∏–∑ reply (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
    2) –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è,
    3) –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã: /allow 123456789
    """
    if msg.reply_to_message and msg.reply_to_message.from_user:
        return msg.reply_to_message.from_user.id
    if getattr(msg, "forward_from", None):
        return msg.forward_from.id
    parts = (msg.text or "").split(maxsplit=1)
    if len(parts) == 2:
        try:
            return int(parts[1])
        except ValueError:
            return None
    return None


@router.message(Command("allow"))
async def cmd_allow(message: types.Message):
    if not _is_admin(message.from_user.id):
        return  # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º –Ω–µ–∞–¥–º–∏–Ω–æ–≤

    uid = _extract_target_id(message)
    if uid is None:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID: `/allow 123456789`", parse_mode="Markdown")
        return

    async with _lock:
        load_allowed_users()
        if uid in ALLOWED_USERS or uid in _ensure_ints(ADMIN_IDS):
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{uid}` —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.", parse_mode="Markdown")
            return
        # –¥–æ–±–∞–≤–ª—è–µ–º
        if isinstance(ALLOWED_USERS, set):
            ALLOWED_USERS.add(uid)
        else:
            ALLOWED_USERS.append(uid)
        save_allowed_users()

    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω `{uid}`. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", parse_mode="Markdown")


@router.message(Command("deny"))
async def cmd_deny(message: types.Message):
    if not _is_admin(message.from_user.id):
        return

    uid = _extract_target_id(message)
    if uid is None:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID: `/deny 123456789`", parse_mode="Markdown")
        return

    async with _lock:
        load_allowed_users()
        if uid in _ensure_ints(ADMIN_IDS):
            await message.reply("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–∞.")
            return
        removed = False
        if isinstance(ALLOWED_USERS, set):
            removed = uid in ALLOWED_USERS
            ALLOWED_USERS.discard(uid)
        else:
            if uid in ALLOWED_USERS:
                ALLOWED_USERS.remove(uid)
                removed = True
        save_allowed_users()

    if removed:
        await message.reply(f"üóë –£–¥–∞–ª—ë–Ω `{uid}` –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–∞.", parse_mode="Markdown")
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{uid}` –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="Markdown")


@router.message(Command("users"))
async def cmd_users(message: types.Message):
    if not _is_admin(message.from_user.id):
        return
    load_allowed_users()
    admins = ", ".join(map(str, sorted(_ensure_ints(ADMIN_IDS)))) or "‚Äî"
    users = ", ".join(map(str, sorted(_ensure_ints(ALLOWED_USERS)))) or "‚Äî"
    text = (
        "*–ê–¥–º–∏–Ω—ã:*\n"
        f"`{admins}`\n\n"
        "*–î–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"`{users}`"
    )
    await message.reply(text, parse_mode="Markdown")


@router.message(Command("whoami"))
async def cmd_whoami(message: types.Message):
    await message.reply(f"–í–∞—à Telegram ID: `{message.from_user.id}`", parse_mode="Markdown")


def register_admin_handlers(dp):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    –í—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –∏–∑ main.
    """
    load_allowed_users()
    dp.include_router(router)
