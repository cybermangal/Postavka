import os
import io
import time
import base64
from typing import List, Tuple, Optional, Dict, Any, Set

import aiohttp
from aiogram import types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BufferedInputFile
)
from aiogram.filters import StateFilter

# =========================
#   –ù–ê–°–¢–†–û–ô–ö–ò GITHUB
# =========================
GH_REPO = os.environ.get("GH_REPO", "").strip()            # "owner/repo"
GH_BRANCH = os.environ.get("GH_BRANCH", "main").strip()
GH_DOCS_PATH = os.environ.get("GH_DOCS_PATH", "docs").strip().strip("/")
GH_TOKEN = os.environ.get("GH_TOKEN", "").strip()
GH_CACHE_TTL = int(os.environ.get("GH_CACHE_TTL", "600"))  # —Å–µ–∫: 600 = 10 –º–∏–Ω—É—Ç

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –±–µ–∑ —Ç–æ—á–∫–∏)
ALLOWED_EXTS: Set[str] = {"pdf", "doc", "docx", "xls", "xlsx", "csv", "txt", "jpg", "jpeg", "png"}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
    resize_keyboard=True,
)

def _is_allowed(name: str) -> bool:
    ext = (name.rsplit(".", 1)[-1] if "." in name else "").lower()
    return ext in ALLOWED_EXTS

def _join_path(*parts: str) -> str:
    clean = [p.strip("/").replace("\\", "/") for p in parts if p is not None and p != ""]
    return "/".join(clean)

def _parent_path(path: str) -> str:
    path = path.strip("/")
    if not path or "/" not in path:
        return ""
    return path.rsplit("/", 1)[0]

def _headers(kind: str = "json") -> dict:
    if kind == "json":
        h = {"Accept": "application/vnd.github+json"}
    elif kind == "raw":
        h = {"Accept": "application/vnd.github.raw"}
    else:
        h = {}
    if GH_TOKEN:
        h["Authorization"] = f"Bearer {GH_TOKEN}"
    return h

def _require_repo() -> Optional[str]:
    if not GH_REPO or "/" not in GH_REPO:
        return "‚ùóÔ∏èGitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: GH_REPO=owner/repo, GH_DOCS_PATH (–∏ GH_TOKEN –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ)."
    return None

# =========================
#   –ö–≠–® –î–ï–†–ï–í–ê –†–ï–ü–û
# =========================
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
#   TREE_CACHE = {
#       "expires": <ts>,
#       "branch_sha": "<sha-commit>",
#       "tree": [ {path, type, sha, ...}, ... ]  # type = "blob" –∏–ª–∏ "tree"
#   }
TREE_CACHE: Dict[str, Any] = {}

async def _gh_json(url: str, kind: str = "json") -> Any:
    async with aiohttp.ClientSession() as sess:
        async with sess.get(url, headers=_headers(kind), timeout=30) as resp:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º 403 rate limit —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            if resp.status == 403:
                text = await resp.text()
                raise RuntimeError(f"GitHub 403: {text}")
            if resp.status != 200:
                text = await resp.text()
                raise RuntimeError(f"GitHub error {resp.status}: {text}")
            if kind == "json":
                return await resp.json()
            return await resp.read()

async def _get_branch_commit_sha() -> str:
    url = f"https://api.github.com/repos/{GH_REPO}/branches/{GH_BRANCH}"
    data = await _gh_json(url, "json")
    sha = data.get("commit", {}).get("sha")
    if not sha:
        raise RuntimeError("No commit sha for branch")
    return sha

async def _get_tree_recursive(commit_sha: str) -> List[Dict[str, Any]]:
    url = f"https://api.github.com/repos/{GH_REPO}/git/trees/{commit_sha}?recursive=1"
    data = await _gh_json(url, "json")
    if data.get("truncated") is True:
        # –£ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–µ–ø ‚Äî –¥–µ—Ä–µ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–æ. –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è docs —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å.
        pass
    tree = data.get("tree", [])
    # –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    norm = []
    for it in tree:
        t = it.get("type")  # "blob" | "tree"
        p = it.get("path")
        sha = it.get("sha")
        if not (t and p and sha):
            continue
        norm.append({"type": t, "path": p, "sha": sha})
    return norm

async def ensure_tree_cache(force: bool = False) -> None:
    now = time.time()
    if not force and TREE_CACHE and TREE_CACHE.get("expires", 0) > now:
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º: 1) –ø–æ–ª—É—á–∞–µ–º sha –≤–µ—Ç–∫–∏, 2) –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    commit_sha = await _get_branch_commit_sha()
    tree = await _get_tree_recursive(commit_sha)
    TREE_CACHE.clear()
    TREE_CACHE.update({
        "expires": now + GH_CACHE_TTL,
        "branch_sha": commit_sha,
        "tree": tree,
    })

def _list_from_tree(current_path: str) -> Tuple[List[str], List[str]]:
    """
    –í–µ—Ä–Ω—É—Ç—å (dirs, files) ‚Äî –∏–º–µ–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
    –§–∞–π–ª—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ ALLOWED_EXTS.
    """
    current_path = current_path.strip("/")
    prefix = f"{current_path}/" if current_path else ""
    tree = TREE_CACHE.get("tree", [])
    dir_set: Set[str] = set()
    file_list: List[str] = []

    for it in tree:
        path = it["path"]
        if not path.startswith(prefix):
            continue
        rest = path[len(prefix):]  # –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–¥ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–æ–π
        if "/" in rest:
            # —ç—Ç–æ —á—Ç–æ-—Ç–æ –≥–ª—É–±–∂–µ: –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ‚Äî –ø–æ–¥–ø–∞–ø–∫–∞
            first = rest.split("/", 1)[0]
            dir_set.add(first)
        else:
            # —ç—Ç–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if it["type"] == "blob" and _is_allowed(rest):
                file_list.append(rest)

    dirs = sorted(dir_set, key=str.lower)
    files = sorted(file_list, key=str.lower)
    return dirs, files

def _find_blob_sha(full_path: str) -> Optional[str]:
    full_path = full_path.strip("/")
    for it in TREE_CACHE.get("tree", []):
        if it["type"] == "blob" and it["path"] == full_path:
            return it["sha"]
    return None

async def gh_get_file_bytes_by_blob_sha(blob_sha: str) -> bytes:
    url = f"https://api.github.com/repos/{GH_REPO}/git/blobs/{blob_sha}"
    # –ü—Ä–æ—Å–∏–º RAW ‚Äî –≤–µ—Ä–Ω—ë—Ç –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
    return await _gh_json(url, "raw")

# =========================
#      UI helpers
# =========================

def _build_inline_for_path(path: str, dirs: List[str], files: List[str]) -> InlineKeyboardMarkup:
    buttons: List[List[InlineKeyboardButton]] = []

    for d in dirs:
        full = _join_path(path, d)
        buttons.append([InlineKeyboardButton(text=f"üìÅ {d}", callback_data=f"doc:d:{full}")])

    for f in files:
        full = _join_path(path, f)
        buttons.append([InlineKeyboardButton(text=f"üìÑ {f}", callback_data=f"doc:f:{full}")])

    parent = _parent_path(path)
    nav_row: List[InlineKeyboardButton] = []
    if parent != path:
        if parent:
            nav_row.append(InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data=f"doc:d:{parent}"))
        home = GH_DOCS_PATH or ""
        nav_row.append(InlineKeyboardButton(text="üè† –ö–æ—Ä–µ–Ω—å", callback_data=f"doc:d:{home}"))
    if nav_row:
        buttons.append(nav_row)

    if not buttons:
        home = GH_DOCS_PATH or ""
        buttons = [[InlineKeyboardButton(text="üè† –ö–æ—Ä–µ–Ω—å", callback_data=f"doc:d:{home}")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# =========================
#       HANDLERS
# =========================

def register_docs_handlers(dp, is_authorized, refuse):

    @dp.message(StateFilter('*'), F.text == "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")
    async def docs_menu(message: types.Message, state=None):
        if not is_authorized(message.from_user.id):
            await refuse(message); return

        err = _require_repo()
        if err:
            await message.answer(err, reply_markup=back_kb); return

        # –∑–∞–≥—Ä—É–∑–∏–º/–æ—Å–≤–µ–∂–∏–º –∫—ç—à –¥–µ—Ä–µ–≤–∞ (2 –∑–∞–ø—Ä–æ—Å–∞ –º–∞–∫—Å–∏–º—É–º)
        try:
            await ensure_tree_cache(force=False)
        except Exception as e:
            # –ï—Å–ª–∏ 403 rate limit ‚Äî —è–≤–Ω–æ –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–æ GH_TOKEN
            txt = str(e)
            if "403" in txt and "rate limit" in txt.lower():
                await message.answer(
                    "‚õî GitHub rate limit. –î–æ–±–∞–≤—å `GH_TOKEN` (PAT) –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render, "
                    "–ª–∏–±–æ –ø–æ–¥–æ–∂–¥–∏ —á–∞—Å. –û—à–∏–±–∫–∞:\n" + txt,
                    reply_markup=back_kb
                )
                return
            await message.answer(f"–û—à–∏–±–∫–∞ GitHub: {e}", reply_markup=back_kb)
            return

        root = GH_DOCS_PATH or ""
        dirs, files = _list_from_tree(root)
        kb = _build_inline_for_path(root, dirs, files)
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–∞–ø–∫—É:", reply_markup=back_kb)
        await message.answer(f"–ü—É—Ç—å: /{root}" if root else "–ü—É—Ç—å: /", reply_markup=kb)

    @dp.callback_query(F.data.startswith("doc:"))
    async def on_doc_cb(cb: CallbackQuery):
        if not is_authorized(cb.from_user.id):
            await cb.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); await cb.answer(); return

        try:
            _, kind, rest = cb.data.split(":", maxsplit=2)
        except ValueError:
            await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"); return

        path = rest.strip("/")

        if kind == "d":
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ –∫—ç—à, –±–µ–∑ –¥–æ–ø.–∑–∞–ø—Ä–æ—Å–æ–≤
            try:
                await ensure_tree_cache(force=False)  # –Ω–∞ —Å–ª—É—á–∞–π –∏—Å—Ç—ë–∫—à–µ–≥–æ TTL
                dirs, files = _list_from_tree(path)
                kb = _build_inline_for_path(path, dirs, files)
                await cb.message.edit_text(f"–ü—É—Ç—å: /{path}" if path else "–ü—É—Ç—å: /")
                await cb.message.edit_reply_markup(reply_markup=kb)
            except Exception as e:
                await cb.answer("–û—à–∏–±–∫–∞")
                await cb.message.answer(f"–û—à–∏–±–∫–∞ GitHub: {e}")
            return

        if kind == "f":
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: 1 –∑–∞–ø—Ä–æ—Å –ø–æ blob sha
            try:
                await ensure_tree_cache(force=False)
                sha = _find_blob_sha(path)
                if not sha:
                    await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª"); return
                raw = await gh_get_file_bytes_by_blob_sha(sha)
                name = path.rsplit("/", 1)[-1]
                await cb.message.answer_document(
                    BufferedInputFile(raw, filename=name),
                    caption=f"üìÅ {name}"
                )
            except Exception as e:
                # –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ –¥–∞–¥–∏–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                fallback = f"https://raw.githubusercontent.com/{GH_REPO}/{GH_BRANCH}/{path}"
                msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}"
                if GH_TOKEN:
                    msg += "\n(–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º; –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è.)"
                else:
                    msg += f"\n–ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É–±–ª–∏—á–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Å—ã–ª–∫—É: {fallback}"
                await cb.message.answer(msg)
            finally:
                await cb.answer()
            return

        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    # –ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –í –º–µ–Ω—é¬ª (–æ–±—ã—á–Ω–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    @dp.message(StateFilter('*'), F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
    async def back_to_menu(message: types.Message, state=None):
        kb = getattr(message.bot, "main_kb", None)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
