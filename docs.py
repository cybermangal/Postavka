import os
import io
import base64
from typing import List, Tuple, Optional

import aiohttp
from aiogram import types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import StateFilter

# ==== –ù–ê–°–¢–†–û–ô–ö–ò GITHUB ====
GH_REPO = os.environ.get("GH_REPO", "").strip()            # "owner/repo"
GH_BRANCH = os.environ.get("GH_BRANCH", "main").strip()
GH_DOCS_PATH = os.environ.get("GH_DOCS_PATH", "docs").strip().strip("/")
GH_TOKEN = os.environ.get("GH_TOKEN", "").strip()

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –±–µ–∑ —Ç–æ—á–∫–∏)
ALLOWED_EXTS = {"pdf", "doc", "docx", "xls", "xlsx", "csv", "txt", "jpg", "jpeg", "png"}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª (–æ–±—ã—á–Ω–∞—è, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
    resize_keyboard=True,
)

def _is_allowed(name: str) -> bool:
    ext = (name.rsplit(".", 1)[-1] if "." in name else "").lower()
    return ext in ALLOWED_EXTS

def _join_path(*parts: str) -> str:
    clean = [p.strip("/").replace("\\", "/") for p in parts if p is not None and p != ""]
    return "/".join(clean)

def _parent_path(path: str) -> str:
    path = path.strip("/")
    if not path or "/" not in path:
        return ""
    return path.rsplit("/", 1)[0]

def _headers_json() -> dict:
    h = {"Accept": "application/vnd.github+json"}
    if GH_TOKEN:
        h["Authorization"] = f"Bearer {GH_TOKEN}"
    return h

def _headers_raw() -> dict:
    # –î–ª—è git/blobs —Å Accept raw –≤–µ—Ä–Ω—ë—Ç –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞.
    h = {"Accept": "application/vnd.github.raw"}
    if GH_TOKEN:
        h["Authorization"] = f"Bearer {GH_TOKEN}"
    return h

# ===== GitHub API helpers =====

async def gh_list(path: str) -> Tuple[List[dict], List[dict]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –≤ path.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (dirs, files), –≥–¥–µ –∫–∞–∂–¥—ã–π ‚Äî —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ GitHub Contents API.
    """
    api = f"https://api.github.com/repos/{GH_REPO}/contents/{path}?ref={GH_BRANCH}"
    async with aiohttp.ClientSession() as sess:
        async with sess.get(api, headers=_headers_json(), timeout=20) as resp:
            if resp.status != 200:
                text = await resp.text()
                raise RuntimeError(f"GitHub list error {resp.status}: {text}")
            data = await resp.json()
    if isinstance(data, dict) and data.get("type") == "file":
        # path ‚Äî —ç—Ç–æ —Ñ–∞–π–ª; –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
        return [], []
    if not isinstance(data, list):
        return [], []
    dirs, files = [], []
    for it in data:
        if it.get("type") == "dir":
            dirs.append(it)
        elif it.get("type") == "file":
            if _is_allowed(it.get("name", "")):
                files.append(it)
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–∞–ø–∫–∏ A‚Üí–Ø, —Ñ–∞–π–ª—ã A‚Üí–Ø
    dirs.sort(key=lambda x: x.get("name", "").lower())
    files.sort(key=lambda x: x.get("name", "").lower())
    return dirs, files

async def gh_get_file_bytes(path: str) -> Tuple[bytes, str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏ –≤ —Ä–µ–ø–æ.
    –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ /contents, –µ—Å–ª–∏ –µ—Å—Ç—å content ‚Äî –¥–µ–∫–æ–¥–∏—Ä—É–µ–º,
    –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–¥—ë–º –≤ git/blob –ø–æ sha –∏ –ø—Ä–æ—Å–∏–º raw.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bytes, filename)
    """
    contents_api = f"https://api.github.com/repos/{GH_REPO}/contents/{path}?ref={GH_BRANCH}"
    async with aiohttp.ClientSession() as sess:
        async with sess.get(contents_api, headers=_headers_json(), timeout=30) as r1:
            if r1.status != 200:
                text = await r1.text()
                raise RuntimeError(f"GitHub content error {r1.status}: {text}")
            meta = await r1.json()

        if meta.get("type") != "file":
            raise RuntimeError("Not a file")

        name = meta.get("name") or path.rsplit("/", 1)[-1]

        # –ü–æ–ø—Ä–æ–±—É–µ–º content (–¥–æ ~1MB GitHub –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64)
        content_b64 = meta.get("content")
        encoding = meta.get("encoding")
        if content_b64 and encoding == "base64":
            try:
                raw = base64.b64decode(content_b64)
                return raw, name
            except Exception:
                pass  # –ø–æ–π–¥—ë–º –ø–æ blobs

        sha = meta.get("sha")
        if not sha:
            # fallback –Ω–∞ download_url, –Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å; –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—ë –∂–µ
            dl = meta.get("download_url")
            if not dl:
                raise RuntimeError("No sha and no download_url")
            async with sess.get(dl, headers=_headers_raw(), timeout=60) as r2:
                if r2.status != 200:
                    text = await r2.text()
                    raise RuntimeError(f"GitHub download error {r2.status}: {text}")
                raw = await r2.read()
                return raw, name

        # –ù–∞–¥—ë–∂–Ω—ã–π –ø—É—Ç—å: git/blob –ø–æ sha —Å Accept: raw ‚Äî –æ—Ç–¥–∞—Å—Ç –±–∞–π—Ç—ã –ª—é–±–æ–≥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (<100MB)
        blob_api = f"https://api.github.com/repos/{GH_REPO}/git/blobs/{sha}"
        async with sess.get(blob_api, headers=_headers_raw(), timeout=60) as r3:
            if r3.status != 200:
                text = await r3.text()
                raise RuntimeError(f"GitHub blob error {r3.status}: {text}")
            raw = await r3.read()
            return raw, name

# ===== UI helpers =====

def _build_inline_for_path(path: str, dirs: List[dict], files: List[dict]) -> InlineKeyboardMarkup:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã.
    callback_data: "doc:d:<fullpath>" –¥–ª—è –ø–∞–ø–æ–∫, "doc:f:<fullpath>" –¥–ª—è —Ñ–∞–π–ª–∞.
    """
    buttons: List[List[InlineKeyboardButton]] = []

    for d in dirs:
        name = d.get("name", "")
        full = _join_path(path, name)
        buttons.append([InlineKeyboardButton(text=f"üìÅ {name}", callback_data=f"doc:d:{full}")])

    for f in files:
        name = f.get("name", "")
        full = _join_path(path, name)
        buttons.append([InlineKeyboardButton(text=f"üìÑ {name}", callback_data=f"doc:f:{full}")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    parent = _parent_path(path)
    nav_row: List[InlineKeyboardButton] = []
    if parent != path:
        if parent:
            nav_row.append(InlineKeyboardButton(text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data=f"doc:d:{parent}"))
        nav_row.append(InlineKeyboardButton(text="üè† –ö–æ—Ä–µ–Ω—å", callback_data=f"doc:d:{GH_DOCS_PATH}"))
    if nav_row:
        buttons.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=buttons or [[
        InlineKeyboardButton(text="üè† –ö–æ—Ä–µ–Ω—å", callback_data=f"doc:d:{GH_DOCS_PATH}")
    ]])

# ===== Handlers =====

def register_docs_handlers(dp, is_authorized, refuse):

    # –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏–∑ —Ä–µ–ø–æ
    @dp.message(StateFilter('*'), F.text == "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")
    async def docs_menu(message: types.Message, state=None):
        if not is_authorized(message.from_user.id):
            await refuse(message); return

        if not GH_REPO:
            await message.answer(
                "‚ùóÔ∏èGitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: GH_REPO, GH_DOCS_PATH (–∏ GH_TOKEN –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ).",
                reply_markup=back_kb
            )
            return

        root = GH_DOCS_PATH or ""
        try:
            dirs, files = await gh_list(root)
            kb = _build_inline_for_path(root, dirs, files)
            await message.answer("–í—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–∞–ø–∫—É:", reply_markup=back_kb)
            await message.answer(f"–ü—É—Ç—å: /{root}" if root else "–ü—É—Ç—å: /", reply_markup=kb)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ GitHub: {e}", reply_markup=back_kb)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º –∏ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    @dp.callback_query(F.data.startswith("doc:"))
    async def on_doc_cb(cb: CallbackQuery):
        if not is_authorized(cb.from_user.id):
            await cb.message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); await cb.answer(); return

        # data —Ñ–æ—Ä–º–∞—Ç–∞: "doc:<kind>:<path>"
        try:
            _, kind, rest = cb.data.split(":", maxsplit=2)
        except ValueError:
            await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"); return

        path = rest.strip("/")
        if kind == "d":
            # –ü–∞–ø–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                dirs, files = await gh_list(path)
                kb = _build_inline_for_path(path, dirs, files)
                await cb.message.edit_text(f"–ü—É—Ç—å: /{path}" if path else "–ü—É—Ç—å: /")
                await cb.message.edit_reply_markup(reply_markup=kb)
            except Exception as e:
                await cb.answer("–û—à–∏–±–∫–∞")
                await cb.message.answer(f"–û—à–∏–±–∫–∞ GitHub: {e}")
            return

        if kind == "f":
            # –§–∞–π–ª: —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            try:
                raw, name = await gh_get_file_bytes(path)
                # –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Telegram –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å ‚Äî —Ç–æ–≥–¥–∞ –¥–∞–¥–∏–º —Å—Å—ã–ª–∫—É
                bio = io.BytesIO(raw)
                bio.name = name  # —á—Ç–æ–±—ã Telegram –ø–æ–Ω—è–ª –∏–º—è
                await cb.message.answer_document(FSInputFile(bio), caption=f"üìÅ {name}")
            except Exception as e:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ raw (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ)
                fallback = f"https://raw.githubusercontent.com/{GH_REPO}/{GH_BRANCH}/{path}"
                msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}"
                if GH_TOKEN:
                    msg += "\n(–§–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è.)"
                else:
                    msg += f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {fallback}"
                await cb.message.answer(msg)
            finally:
                await cb.answer()
            return

        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
