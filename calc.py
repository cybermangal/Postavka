from aiogram import types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.filters import StateFilter  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
calc_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

class CalcFSM(StatesGroup):
    waiting_for_order = State()
    waiting_for_vendor = State()

def register_calc_handlers(dp, is_authorized, refuse):

    @dp.message(StateFilter('*'), F.text == "üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")  # üëà —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async def calc_start(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π –ù–î–°/–ë–ù–î–°:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`50000 –±–Ω–¥—Å` ‚Äî –±–µ–∑ –ù–î–°\n"
            "`50000 –Ω–¥—Å` ‚Äî —Å –ù–î–°\n\n"
            "(/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)", parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CalcFSM.waiting_for_order)

    @dp.message(CalcFSM.waiting_for_order)
    async def get_order(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        if (message.text or "").lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=calc_kb)
            return

        try:
            parts = message.text.replace(",", ".").split()
            if len(parts) != 2 or parts[1].lower() not in ("–Ω–¥—Å", "–±–Ω–¥—Å"):
                raise ValueError
            order_value = float(parts[0])
            order_type = parts[1].lower()
        except Exception:
            await message.answer(
                "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏ —É–∫–∞–∂–∏—Ç–µ '–Ω–¥—Å' –∏–ª–∏ '–±–Ω–¥—Å', –Ω–∞–ø—Ä–∏–º–µ—Ä: `55000 –±–Ω–¥—Å`",
                parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
            return

        await state.update_data(order_value=order_value, order_type=order_type)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø–æ–º–µ—Ç–∫–æ–π –ù–î–°/–ë–ù–î–°:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`45000 –±–Ω–¥—Å` ‚Äî –±–µ–∑ –ù–î–°\n"
            "`45000 –Ω–¥—Å` ‚Äî —Å –ù–î–°\n\n"
            "(/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)", parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
        await state.set_state(CalcFSM.waiting_for_vendor)

    @dp.message(CalcFSM.waiting_for_vendor)
    async def get_vendor(message: types.Message, state: FSMContext):
        if not is_authorized(message.from_user.id):
            await refuse(message)
            return
        if (message.text or "").lower() == "/cancel":
            await state.clear()
            await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=calc_kb)
            return

        try:
            parts = message.text.replace(",", ".").split()
            if len(parts) != 2 or parts[1].lower() not in ("–Ω–¥—Å", "–±–Ω–¥—Å"):
                raise ValueError
            vendor_value = float(parts[0])
            vendor_type = parts[1].lower()
        except Exception:
            await message.answer(
                "‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —É–∫–∞–∂–∏—Ç–µ '–Ω–¥—Å' –∏–ª–∏ '–±–Ω–¥—Å', –Ω–∞–ø—Ä–∏–º–µ—Ä: `40000 –±–Ω–¥—Å`",
                parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
            return

        data = await state.get_data()
        order_value = data["order_value"]
        order_type = data["order_type"]

        if order_type == vendor_type:
            net_order = order_value
            net_vendor = vendor_value
            profit = (net_order - net_vendor) * 0.77
            markup_type = "A"
        elif order_type == "–Ω–¥—Å" and vendor_type == "–±–Ω–¥—Å":
            net_order = order_value / 1.2
            net_vendor = vendor_value
            profit = (net_order - net_vendor) * 0.88
            markup_type = "B"
        elif order_type == "–±–Ω–¥—Å" and vendor_type == "–Ω–¥—Å":
            net_order = order_value
            net_vendor = vendor_value / 1.2
            profit = (net_order - net_vendor) * 0.88
            markup_type = "C"
        else:
            await message.answer("–û—à–∏–±–∫–∞: —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∏–ø–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=calc_kb)
            await state.clear()
            return

        try:
            margin = (profit / net_order) * 100 if net_order else 0
        except ZeroDivisionError:
            margin = 0

        profit = round(profit, 2)
        margin = round(margin, 2)
        net_order = round(net_order, 2)
        net_vendor = round(net_vendor, 2)

        formula_label = {
            "A": "–û–±–∞ '—Å –ù–î–°' –∏–ª–∏ –æ–±–∞ '–±–µ–∑ –ù–î–°'",
            "B": "–ó–∞–∫–∞–∑ —Å –ù–î–°, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –±–µ–∑ –ù–î–°",
            "C": "–ó–∞–∫–∞–∑ –±–µ–∑ –ù–î–°, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å –ù–î–°"
        }

        await message.answer(
            f"üìä <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n"
            f"<i>{formula_label.get(markup_type)}</i>\n\n"
            f"<b>–ó–∞–∫–∞–∑:</b> {net_order}\n"
            f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {net_vendor}\n"
            f"<b>–ü—Ä–∏–±—ã–ª—å:</b> {profit}\n"
            f"<b>–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å:</b> {margin}%\n",
            parse_mode="HTML", reply_markup=calc_kb
        )
        await state.clear()
